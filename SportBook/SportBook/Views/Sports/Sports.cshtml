@model IEnumerable<SportBook.Models.Event>
@{
    ViewData["Title"] = "Sports Home";
    Layout = "~/Views/Shared/_SportsLayout.cshtml";
    var myEvents = ViewData["myEvents"] as IEnumerable<SportBook.Models.Event>;
    var joinedEvents = ViewData["joinedEvents"] as IEnumerable<SportBook.Models.Event>;
    var currentUser = ViewData["CurrentUser"] as SportBook.Models.User;
}

<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta name="viewport" content="width=device-width">
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
</head>


<h1>Sports_home</h1>

<form asp-controller="Sports" asp-action="Sports">
    <p>
        <div class="input-group" style="width:40%">
            <input type="text" class="form-control" name="title" placeholder="Title" style="margin-right:5px">
            <input type="text" class="form-control" name="gametype" placeholder="Game type" style="margin-right:5px">
            <input type="text" class="form-control" name="city" placeholder="City" style="margin-right:5px">
            <div class="input-group-append">
                <button type="submit" class="btn btn-secondary"><i class="fa fa-search"></i></button>
            </div>
        </div>
    </p>
</form>
<div class="d-flex">
    <ul class="nav nav-tabs nav-justified w-100">
        <li class="nav-item">
            <a class="nav-link active" id="all-tab" data-toggle="tab" href="#all" role="tab" aria-controls="all" aria-selected="true" style="text-decoration:none; color:black; font-size:larger">All Events</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="joined-tab" data-toggle="tab" href="#joined" role="tab" aria-controls="joined" aria-selected="false" style="text-decoration:none; color:black; font-size:larger">Joined Events</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="my-tab" data-toggle="tab" href="#my" role="tab" aria-controls="my" aria-selected="false" style="text-decoration:none; color:black; font-size:larger">My Events</a>
        </li>
    </ul>
    <div class="ml-auto ">
        <button style="margin-left:5px" onclick="location.href='@Url.Action("SportsEvents", "Sports")'" class="btn btn-secondary"><i class="fa fa-plus"></i></button>
    </div>
</div>

@* Event lists *@

<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="all" role="tabpanel" aria-labelledby="all-tab">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MaxParticipantAmt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsPrivate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsTeamEvent)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkGameTypeNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkLocationNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkOwnerNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MaxParticipantAmt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EndTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsPrivate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsTeamEvent)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkGameTypeNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkLocationNavigation.Address)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkOwnerNavigation.Username)
                        </td>
                        <td>
                            <a asp-action="ViewEvent" asp-route-id="@item.EventId">Details</a>
                            @if (item.FkOwner == currentUser.UserId)
                            {
                                <a asp-action="Edit" asp-route-id="@item.EventId">Edit</a>
                            }
                            @if (item.FkOwner == currentUser.UserId)
                            {
                                <a asp-action="Delete" asp-route-id="@item.EventId">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="joined" role="tabpanel" aria-labelledby="joined-tab">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MaxParticipantAmt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsPrivate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsTeamEvent)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkGameTypeNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkLocationNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkOwnerNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in joinedEvents)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MaxParticipantAmt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EndTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsPrivate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsTeamEvent)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkGameTypeNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkLocationNavigation.Address)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkOwnerNavigation.Username)
                        </td>
                        <td>
                            <a asp-action="ViewEvent" asp-route-id="@item.EventId">Details</a>
                            @if (item.FkOwner == currentUser.UserId)
                            {
                                <a asp-action="Edit" asp-route-id="@item.EventId">Edit</a>
                            }
                            @if (item.FkOwner == currentUser.UserId)
                            {
                                <a asp-action="Delete" asp-route-id="@item.EventId">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="my" role="tabpanel" aria-labelledby="my-tab">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MaxParticipantAmt)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsPrivate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsTeamEvent)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkGameTypeNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkLocationNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkOwnerNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in myEvents)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MaxParticipantAmt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EndTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsPrivate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IsTeamEvent)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkGameTypeNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkLocationNavigation.Address)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkOwnerNavigation.Username)
                        </td>
                        <td>
                            <a asp-action="ViewEvent" asp-route-id="@item.EventId">Details</a>
                            @if (item.FkOwner == currentUser.UserId)
                            {
                                <a asp-action="Edit" asp-route-id="@item.EventId">Edit</a>
                            }
                            @if (item.FkOwner == currentUser.UserId)
                            {
                                <a asp-action="Delete" asp-route-id="@item.EventId">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@*<div id="chat">
    @await Component.InvokeAsync("Chatroom")
</div>*@


<!--Reference the SignalR library. -->
@*<script src="~/lib/signalr/signalr.js"></script>*@

@*<script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl('/chat')
            .build();
        bindConnectionMessage(connection);
        connection.start()
            .then(function () {
                onConnected(connection);
            })
            .catch(function (error) {
                console.error(error.message);
            });
    </script>*@

@* Chat window ---------------------------------------------------------------------------------------------*@
@*<div class="row justify-content-end h-100">
    <div class="col-sm-8 col-md-6 col-xl-4 chat">
        <div class="card">
            <div class="card-body msg_card_body">
                <div id="messages"></div>
                <div class="input-group mb-1">
                    <textarea class="form-control type_msg" id="message"></textarea>
                    <div class="input-group-append">
                        <div class="input-group-text send_btn" id="sendmessage">
                            <i class="far fa-paper-plane"></i>
                        </div>
                    </div>
                </div>
                <div style="overflow: auto;">
                    <button class="btn-secondary pull-right" id="echo">
                        <i class="fas fa-dragon"></i>
                    </button>
                    <button class="btn-secondary pull-right" id="sendmessage">
                        <i class="far fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>*@
@* -------------------------------------------------------------------------------------------------------- *@
@*<div class="modal alert alert-danger fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div>Connection Error...</div>
                <div><strong style="font-size: 1.5em;">Hit Refresh/F5</strong> to rejoin. ;)</div>
            </div>
        </div>
    </div>
</div>*@

<!--Add script to update the page and send messages.-->
@*<script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {

            // Get the user name and store it to prepend to messages.
            var username = '@currentUser.Username'; //generateRandomName();

            // Set initial focus to message input box.
            var messageInput = document.getElementById('message');
            messageInput.focus();

            function createMessageEntry(encodedName, encodedMsg) {
                var entry = document.createElement('div');
                entry.classList.add("message-entry");
                entry.classList.add("d-flex");
                entry.classList.add("justify-content-start");
                entry.classList.add("mb-4");
                if (encodedName === "_SYSTEM_") {
                    entry.innerHTML = encodedMsg;
                    entry.classList.add("text-center");
                    entry.classList.add("system-message");
                } else if (encodedName === "_BROADCAST_") {
                    entry.classList.add("text-center");
                    entry.innerHTML = `<div class="text-center broadcast-message">${encodedMsg}</div>`;
                } else if (encodedName === username) {
                    entry.innerHTML = `<div class="message-avatar pull-right" style="font-weight: bold">${encodedName}</div>` +
                        `<div class="message-content pull-right">${encodedMsg}<div>`;
                } else {
                    entry.innerHTML = `<div class="message-avatar pull-left" style="font-weight: bold">${encodedName}</div>` +
                        `<div class="message-content pull-left">${encodedMsg}<div>`;
                }
                return entry;
            }

            function bindConnectionMessage(connection) {
                var messageCallback = function (name, message) {
                    if (!message) return;
                    // Html encode display name and message.
                    var encodedName = name;
                    var encodedMsg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    var messageEntry = createMessageEntry(encodedName, encodedMsg);

                    var messageBox = document.getElementById('messages');
                    messageBox.appendChild(messageEntry);
                    messageBox.scrollTop = messageBox.scrollHeight;
                };
                // Create a function that the hub can call to broadcast messages.
                connection.on('sendMessage', messageCallback);
                connection.on('echo', messageCallback);
                connection.onclose(onConnectionError);
            }

            function onConnected(connection) {
                console.log('connection started');
                connection.send('sendMessage', '_SYSTEM_', username + ' joined');
                document.getElementById('sendmessage').addEventListener('click', function (event) {
                    // Call the sendMessage method on the hub.
                    if (messageInput.value) {
                        connection.send('sendMessage', username, messageInput.value);
                    }

                    // Clear text box and reset focus for next comment.
                    messageInput.value = '';
                    messageInput.focus();
                    event.preventDefault();
                });
                document.getElementById('message').addEventListener('keypress', function (event) {
                    if (event.keyCode === 13) {
                        event.preventDefault();
                        document.getElementById('sendmessage').click();
                        return false;
                    }
                });
                document.getElementById('echo').addEventListener('click', function (event) {
                    // Call the echo method on the hub.
                    connection.send('echo', username, messageInput.value);

                    // Clear text box and reset focus for next comment.
                    messageInput.value = '';
                    messageInput.focus();
                    event.preventDefault();
                });
            }

            function onConnectionError(error) {
                if (error && error.message) {
                    console.error(error.message);
                }
                var modal = document.getElementById('myModal');
                modal.classList.add('in');
                modal.style = 'display: block;';
            }

            var connection = new signalR.HubConnectionBuilder()
                .withUrl('/chat')
                .build();
            bindConnectionMessage(connection);
            connection.start()
                .then(function () {
                    onConnected(connection);
                })
                .catch(function (error) {
                    console.error(error.message);
                });
            //connection.closed()
            //    .then(function () {
            //        onDisconnectedAsync("Disconnected");
            //    });
        });
</script>*@