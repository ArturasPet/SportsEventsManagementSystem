@model IEnumerable<SportBook.Models.Event>
@{
    ViewData["Title"] = "Sports Home";
    Layout = "~/Views/Shared/_SportsLayout.cshtml";
    var myEvents = ViewData["myEvents"] as IEnumerable<SportBook.Models.Event>;
    var joinedEvents = ViewData["joinedEvents"] as IEnumerable<SportBook.Models.Event>;
    var currentUser = ViewData["CurrentUser"] as SportBook.Models.User;
    var participants = ViewData["Participants"] as Dictionary<int, int>;
    var locations = ViewData["Locations"] as List<SportBook.ViewModels.LocationData>;
}

@*<style>
    modal-list {
        min-width: -moz-max-content;
        min-width: -webkit-max-content;
        min-width: intrinsic;
    }
</style>*@

<head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta name="viewport" content="width=device-width">
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
</head>


<div class="d-flex">
    <h1>Sport Events</h1>
    <div class="ml-auto col-sm-3 p-0">
        <p>
            <div class="input-group">
                <input id="myInput" type="text" class="form-control" name="title" placeholder="Search..." style="margin-right:5px">
                <div class="input-group-append">
                    <button class="btn btn-secondary"><i class="fa fa-search"></i></button>
                </div>
            </div>
        </p>
    </div>
</div>

<div class="modal" id="locationEventModal">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Events</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <!-- Modal body -->
            <div class="modal-body overflow-auto">
                <div id="locationEventList">
        
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="locationSuggestionModal">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Location request</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <!-- Modal body -->
            <div class="modal-body overflow-auto">
                <div id="locationSuggestionForm">
                    @await Component.InvokeAsync("LocationSuggestion", new { addr = "", latitude = Decimal.Zero, longitude = Decimal.Zero })
                </div>
            </div>
        </div>
    </div>
</div>

<div class="d-flex">
    <ul class="nav nav-tabs nav-justified w-100 mr-3" id="navTabs">
        <li class="nav-item">
            <a class="nav-link active" name="sportNav" id="all-tab" data-toggle="tab" href="#all" role="tab" aria-controls="all" aria-selected="true" style="text-decoration:none; color:black; font-size:larger">All Events</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" name="sportNav" id="joined-tab" data-toggle="tab" href="#joined" role="tab" aria-controls="joined" aria-selected="false" style="text-decoration:none; color:black; font-size:larger">Joined Events</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" name="sportNav" id="my-tab" data-toggle="tab" href="#my" role="tab" aria-controls="my" aria-selected="false" style="text-decoration:none; color:black; font-size:larger">My Events</a>
        </li>
    </ul>
    <div class="ml-auto ">
        <button class="btn btn-secondary"
                id="eventDisplay"
                onclick="changeDisplayToMap()"
                onload="setInitialElements()">
            <i class="fa fa-map"
               style="color:white;
               isolation: isolate;"
               id="btnInnerIcon">
            </i>
        </button>
    </div>
    <div>
        <button style="margin-left:5px"
                onclick="location.href='@Url.Action("Create", "Sports")'"
                class="btn btn-secondary">
            <i class="fa fa-plus"
               style="color:white;
               isolation: isolate;">
            </i>
        </button>
    </div>
</div>

@* Event lists *@

<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="all" role="tabpanel" aria-labelledby="all-tab">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        Participants
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsPrivate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkGameTypeNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkLocationNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="allS">
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @participants[item.EventId] / @Html.DisplayFor(modelItem => item.MaxParticipantAmt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EndTime)
                        </td>
                        <td style="isolation: isolate;">
                            @Html.DisplayFor(modelItem => item.IsPrivate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkGameTypeNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkLocationNavigation.Address)
                        </td>
                        <td>
                            <a asp-action="ViewEvent" asp-route-id="@item.EventId" class="btn btn-secondary ml-2"><i class="fa fa-info" style="color:white; isolation: isolate;"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="joined" role="tabpanel" aria-labelledby="joined-tab">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        Participants
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsPrivate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkGameTypeNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkLocationNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="joinedS">
                @foreach (var item in joinedEvents)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @participants[item.EventId] / @Html.DisplayFor(modelItem => item.MaxParticipantAmt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EndTime)
                        </td>
                        <td style="isolation: isolate;">
                            @Html.DisplayFor(modelItem => item.IsPrivate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkGameTypeNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkLocationNavigation.Address)
                        </td>
                        <td>
                            <a asp-action="ViewEvent" asp-route-id="@item.EventId" class="btn btn-secondary ml-2"><i class="fa fa-info" style="color:white; isolation: isolate;"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="my" role="tabpanel" aria-labelledby="my-tab">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        Participants
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.StartTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EndTime)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.IsPrivate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkGameTypeNavigation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FkLocationNavigation)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="myS">
                @foreach (var item in myEvents)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @participants[item.EventId] / @Html.DisplayFor(modelItem => item.MaxParticipantAmt)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StartTime)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EndTime)
                        </td>
                        <td style="isolation: isolate;">
                            @Html.DisplayFor(modelItem => item.IsPrivate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkGameTypeNavigation.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FkLocationNavigation.Address)
                        </td>
                        <td>
                            <a asp-action="ViewEvent" asp-route-id="@item.EventId" class="btn btn-secondary ml-2"><i class="fa fa-info" style="color:white; isolation: isolate;"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="ml-5 mr-5 mt-2" style="width:auto; height:800px" id="eventMap"></div>

<script async defer
    src='@ViewData["GoogleApi"]'>
</script>

<script>
    // #eventMap initially invisible by default
    $('#eventMap').hide();

    function changeDisplayToMap() {
        $('#navTabs').hide();
        $('#myTabContent').hide();
        $('#eventMap').show();
        document.getElementById("eventDisplay").setAttribute("onClick", "changeDisplayToList()");
        document.getElementById("btnInnerIcon").setAttribute("class", "fa fa-list");
    }
    function changeDisplayToList() {
        $('#eventMap').hide();
        $('#navTabs').show();
        $('#myTabContent').show();
        document.getElementById("eventDisplay").setAttribute("onClick", "changeDisplayToMap()");
        document.getElementById("btnInnerIcon").setAttribute("class", "fa fa-map");
    }

    $(document).ready(function () {
        $("#myInput").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#allS tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
            $("#joinedS tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
            $("#myS tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });
    });
</script>

<script>
    var markers = [];
    var marker = null;
    var address = "";
    function clearMarkers() {
        marker.setMap(null);
        marker = null;
        //for (var i = 0; i < markers.length; i++) {
        //  markers[i].setMap(null);
        //}
    }
    // Initialize and add the map
    function initMap() {
        let locationsObj = @Html.Raw(Json.Serialize(locations));
        let kaunas = { lat: locationsObj[0].latitude, lng: locationsObj[0].longitude };
        var infoWindowNewLoc = new google.maps.InfoWindow({content: '', position: kaunas});
        let map = new google.maps.Map(
            document.getElementById('eventMap'), { zoom: 6, center: kaunas });
        var geocoder = new google.maps.Geocoder;
        var test = "asd";
        lmao(map);
        map.addListener('rightclick', function(mapsMouseEvent) {
        // Close the current InfoWindow.
            infoWindowNewLoc.close();
            // Create a new InfoWindow.
            infoWindowNewLoc = new google.maps.InfoWindow({ position: mapsMouseEvent.latLng });
            var clickedLocation = mapsMouseEvent.latLng;
            geocodeLatLng(geocoder, map, infoWindowNewLoc, clickedLocation);
            google.maps.event.addListener(infoWindowNewLoc, 'domready', function () {
                $('#submitLocation').click(function () {
                    var clicked = this;
                    var lat = mapsMouseEvent.latLng.lat;
                    var lon = mapsMouseEvent.latLng.lng;
                    var link = "@Url.Action("LocationSuggestionVC", "Sports", new { addr = "_address_", latitude = "_latitude_", longitude = "_longitude_"})";
                    link = link.replace("_address_", address.toString()).replace("_latitude_", lat).replace("_longitude_", lon);
                    link = link.replace(/ /g, "_");
                    link = link.replace(/amp;/g, "");
                    //window.location.href = link;
                    console.log(link);
                    $("#locationSuggestionForm").load(link, function () { });
                    $('#locationSuggestionModal').modal('show');  
                });
            });
            //infoWindowNewLoc.open(map);
        });
    }
    // Reverse Geocoding
    function geocodeLatLng(geocoder, map, infowindow, latlng) {
        geocoder.geocode({'location': latlng}, function(results, status) {
            if (status === 'OK') {
                if (results[0]) {
                    map.setZoom(16);
                    map.setCenter(latlng);
                    if (marker !== null) {
                        clearMarkers();
                        address = "";
                    }
                    marker = new google.maps.Marker({
                        position: latlng,
                        map: map
                    });
                    //markers.push(marker);
                    //google.maps.event.addListener(infowindow, 'closeclick', function () {
                    //    marker.setMap(null); //removes the marker
                    //});
                    address = results[0].formatted_address;
                    infowindow.setContent('<div class="text-center mb-1">' + '<p> <h5>' + results[0].formatted_address + '</h5> </p>' + '<button class="btn btn-secondary" id="submitLocation">Suggest location</button>' + '</div>');
                    infowindow.open(map, marker);
                } else {
                    window.alert('No results found');
                }
            } else {
                window.alert('Geocoder failed due to: ' + status);
            }
        });
    }
    function lmao(map) {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        let allMarkers = [];
        // Create some markers
        for (var i = 0; i < locationsObj.length; i++) {
            let pos = { lat: locationsObj[i].latitude, lng: locationsObj[i].longitude };
            let marker = new google.maps.Marker({ position: pos, map: map });
            marker.myData = i;
            allMarkers.push(marker);
            let infowindow = new google.maps.InfoWindow({
                content: locationsObj[i].address + '</br>' +
                         '<h5>' + locationsObj[i].game + '</h5>' +
                    '<div class="alert alert-success">Upcoming events: ' + locationsObj[i].eventCount + '</div>',
                map: map
            });
            marker.addListener('mouseover', function () {
                infowindow.open(map, this);
            });
            marker.addListener('mouseout', function () {
                infowindow.close();
            });
            google.maps.event.addListener(marker, 'click', function (e) {
                var clicked = this;
                var link = "@Url.Action("LocationEventListVC", "Sports", new { selectedLocationId = "-1" })";
                link = link.replace("-1", locationsObj[clicked.myData].locationId);
                link = link.replace("amp;", "");
                $("#locationEventList").load(link, function () { });
                $('#locationEventModal').modal('show');                
            });
        }
    };
</script>