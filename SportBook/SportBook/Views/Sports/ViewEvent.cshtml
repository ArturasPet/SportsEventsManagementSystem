@model SportBook.ViewModels.EventData
@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_SportsLayout.cshtml";
    var locations = ViewData["Locations"] as List<SportBook.ViewModels.LocationData>;
    var currentUser = ViewData["CurrentUser"] as SportBook.Models.User;
    var eventInvites = ViewData["EventInvites"] as IEnumerable<SportBook.Models.EventInvitation>;
}
@if ((bool)ViewData["isFailed"] == true)
{
    <script type="text/javascript">
        $(window).on('load', function () {
            $('#editModal').modal('show');
        });
    </script>
}

<div class="d-flex">
    <h1>Event details</h1>
    <div class="ml-auto mr-5">
        @if (currentUser.UserId == Model.Event.FkOwner)
        {
            <a class="btn btn-secondary" data-toggle="modal" data-target="#deleteModal"><i class="fa fa-trash-alt" style="color:white"></i></a>
            <a class="btn btn-secondary ml-2" data-toggle="modal" data-target="#editModal"><i class="fa fa-edit" style="color:white"></i></a>
            <a class="btn btn-secondary ml-2" data-toggle="modal" data-target="#myModal"><i class="fa fa-user-plus" style="color:white"></i></a>
        }
        <a asp-action="Sports" class="btn btn-secondary ml-2"><i class="fa fa-list"></i></a>
    </div>
</div>

<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Select user</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
                <input class="form-control mb-2" id="myInput" type="text" placeholder="Search..">
                <h4 class="align-content-center">Users</h4>
                <ul class="list-group overflow-auto p-2" style="max-height:550px" id="invitableUserList">
                    @await Component.InvokeAsync("InvitableUserList", new { eventId = Model.Event.EventId, userId = 0 })
                </ul>
            </div>
        </div>
    </div>
</div>
<form id="eventForm" asp-action="Edit" asp-route-id="@Model.Event.EventId">
    <div class="modal" id="editModal">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Edit team</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group">
                        <label asp-for="Event.Title" class="control-label"></label>
                        <input asp-for="Event.Title" class="form-control" />
                        <span asp-validation-for="Event.Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Event.MaxParticipantAmt" class="control-label"></label>
                        <input asp-for="Event.MaxParticipantAmt" class="form-control" />
                        <span asp-validation-for="Event.MaxParticipantAmt" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Event.StartTime" class="control-label"></label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <button type="button" id="toggle" class="input-group-text"><i class="fa fa-calendar-alt"></i></button>
                            </div>
                            <input type="text" asp-for="Event.StartTime" id="datepicker" class="form-control" />
                        </div>
                        <span asp-validation-for="Event.StartTime" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Event.EndTime" class="control-label"></label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <button type="button" id="toggle2" class="input-group-text"><i class="fa fa-calendar-alt"></i></button>
                            </div>
                            <input type="text" asp-for="Event.EndTime" id="datepicker2" class="form-control" />
                        </div>
                        <span asp-validation-for="Event.EndTime" class="text-danger"></span>
                    </div>
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="Event.IsPrivate" /> @Html.DisplayNameFor(model => model.Event.IsPrivate)
                        </label>
                    </div>
                    <input type="hidden" asp-for="Event.IsTeamEvent" />
                    <input type="hidden" asp-for="Event.FkGameType" />
                    <input type="hidden" asp-for="Event.FkOwner" />
                    <input type="hidden" asp-for="Event.EventId" />
                </div>
                <div class="modal-footer">
                    <div class="form-group">
                        <input type="submit" value="Edit" class="btn btn-secondary" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<form id="deleteForm" asp-action="Delete" asp-route-id="@Model.Event.EventId">
    <div class="modal " id="deleteModal">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Delete event</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div class="p-2 text-center">
                        Are you sure you want to delete <b>@Model.Event.Title</b>?

                    </div>
                </div>
                <div class="modal-footer">
                    <div class="form-group">
                        <input type="submit" value="Delete" class="btn btn-outline-danger" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>


<div>
    <hr />
    <div class="row">
        <div class="col ">
            <div class="row">
                <div class="p-2 font-weight-bold ml-3 flex-column col-md-4">
                    @Html.DisplayNameFor(model => model.Event.Title):
                </div>
                <div class="p-2 flex-column ml-3">
                    @Html.DisplayFor(model => model.Event.Title)
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="p-2 font-weight-bold ml-3 flex-column col-md-4">
                    Event time:
                </div>
                <div class="p-2 flex-column ml-3">
                    @Html.DisplayFor(model => model.Event.StartTime) - @Html.DisplayFor(model => model.Event.EndTime)
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="p-2 font-weight-bold ml-3 flex-column col-md-4">
                    @Html.DisplayNameFor(model => model.Event.FkGameTypeNavigation):
                </div>
                <div class="p-2 flex-column ml-3">
                    @Html.DisplayFor(model => model.Event.FkGameTypeNavigation.Name)
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="p-2 font-weight-bold ml-3 flex-column col-md-4">
                    Event creator:
                </div>
                <div class="p-2 flex-column ml-3">
                    @Html.DisplayFor(model => model.Event.FkOwnerNavigation.Username)
                </div>
            </div>
            <hr />
        </div>

        <div class="col" id="participantList">
            @await Component.InvokeAsync("EventMemberList", new { eventId = Model.Event.EventId, userId = 0 })
            @*<div class="row mr-3 p-2">


                    <div class="flex-column">
                        <h2>
                            Participants:
                        </h2>
                    </div>
                    <div class="col-md-8">
                        <ul class="list-group-flush" id="participantList">
                            @await Component.InvokeAsync("EventMemberList", new { eventId = Model.Event.EventId, userId = 0 })
                        </ul>
                    </div>
                </div>*@
        </div>
    </div>
</div>
@if (!Model.Participants.Any(x => x.FkUser == currentUser.UserId) && Model.Event.MaxParticipantAmt > Model.Participants.Count)
{
    <div>
        <div class="col">
            @*<div class="flex-row p-2" id="joinLeaveText">
                    You have been invited to join this team
                </div>*@

            <div class="flex-row p-2 ml-2">
                <input id="joinLeaveBtn" type="button" onclick="joinEvent()" value="Join" class="btn btn-success" />
            </div>

        </div>

    </div>
}
else if (Model.Participants.Any(x => x.FkUser == currentUser.UserId) && currentUser.UserId != Model.Event.FkOwner)
{
    <div>
        <div class="col">
            @*<div class="flex-row p-2" id="joinLeaveText">
                    Are you sure you want to leave?
                </div>*@

            <div class="flex-row p-2 ml-2">
                <input id="joinLeaveBtn" type="button" onclick="leaveEvent()" value="Leave" class="btn btn-danger" />
            </div>

        </div>
    </div>
}

<script src="~/lib/jquery-datetimepicker/jquery.datetimepicker.full.min.js"></script>
<div class="row">
    <div class="col-xl-7 col-md-12 col-sm-12 ml-3" style="min-height:300px; overflow:visible !important" id="eventMap"></div>

    <div id="chat" class="col-xl-4 col-md-10 col-sm-10 p-2 m-2 m-md-auto m-sm-auto">
        @await Component.InvokeAsync("Chatroom", new { chatGroup = ("event_" + Model.Event.EventId) })
    </div>
</div>

@*<div>
        <a asp-action="Edit" asp-route-id="@Model.Event.EventId">Edit</a> |
        <a asp-action="Index">Back to List</a>
    </div>*@

<script async defer
    src= '@ViewData["GoogleApi"]'>
</script>

<script>
    $('body').on('click', '.removeMember', function () { RemoveEventMember($(this)); return false; });

    function joinEvent() {
        $("#participantList").load("@Url.Action("SportsEventMemberVC", "Sports", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Leave");
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "leaveEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-success');
        document.getElementById("joinLeaveBtn").classList.add('btn-danger');
    }

    function leaveEvent() {
        $("#participantList").load("@Url.Action("SportsEventMemberVC", "Sports", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Join");
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "joinEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-danger');
        document.getElementById("joinLeaveBtn").classList.add('btn-success');
    }
</script>

<script>
    // Initialize and add the map
    function initMap() {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        var kaunas = { lat: locationsObj[0].latitude, lng: locationsObj[0].longitude };
        var map = new google.maps.Map(
            document.getElementById('eventMap'), { zoom: 6, center: kaunas });
        //var marker = new google.maps.Marker({ position: kaunas, map: map });
        lmao(map);
    }
    function lmao(map) {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        var allMarkers = [];
        // Create some markers
        for (var i = 0; i < locationsObj.length; i++) {
            var pos = { lat: locationsObj[i].latitude, lng: locationsObj[i].longitude };
            var marker = new google.maps.Marker({ position: pos, map: map });
            marker.myData = i;
            allMarkers.push(marker);
            let infowindow = new google.maps.InfoWindow({
                content: locationsObj[i].address + '</br>' + '<h4>' + locationsObj[i].game + '</h4>',
                map: map
            });
            marker.addListener('mouseover', function () {
                infowindow.open(map, this);
            });
            marker.addListener('mouseout', function () {
                infowindow.close();
            });
        }

        //for (let marker of allMarkers) {
        //marker.addListener('mouseover', function () {
        //    infowindow.open(map, this);
        //});
        //// assuming you also want to hide the infowindow when user mouses-out
        //marker.addListener('mouseout', function () {
        //    infowindow.close();
        //});
    };

</script>

<script>
    $(document).ready(function () {
        $("#myInput").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#invitableUserList li").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });
    });

    $('body').on('click', '.invitableUser', function () {
        PostInvites($(this));
        return false;
    });

    function PostInvites(data) {
        var obj = data.attr("id");
        var link = "@Url.Action("InvitableUserVC", "Sports", new { eventId = Model.Event.EventId, userId = "-1" })";
        link = link.replace("-1", obj);
        link = link.replace("amp;", "");
        $("#invitableUserList").load(link, function () { });
    }
    $('#datepicker').datetimepicker({
        timepicker: true,
        datepicker: true,
        format: 'Y-m-d H:i',
        hours12: false,
        step: 15,
        onShow: function (ct) {
            this.setOptions({
                minDate: new Date(),
                maxDate: $('#datepicker2').val() ? $('#datepicker2').val() : false
            })
        }
    });
    $('#toggle').on('click', function () {
        $('#datepicker').datetimepicker('toggle')
    })

    $('#datepicker2').datetimepicker({
        timepicker: true,
        datepicker: true,
        format: 'Y-m-d H:i',
        hours12: false,
        step: 15,
        onShow: function (ct) {
            this.setOptions({
                minDate: $('#datepicker').val() ? $('#datepicker').val() : false
            })
        }
    });
    $('#toggle2').on('click', function () {
        $('#datepicker2').datetimepicker('toggle')
    })
</script>
