@model SportBook.ViewModels.EventDetailData

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var locations = ViewData["Locations"] as List<SportBook.ViewModels.LocationData>;
    var currentUser = ViewData["CurrentUser"] as SportBook.Models.User;
}
<link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />
<div class="d-flex">
    <h1 class="col-md-2">Details</h1>
    <div class="ml-auto">
        <button style="margin-left:5px" data-toggle="modal" data-target="#myModal" class="btn btn-secondary ml-auto"><i class="fa fa-address-book"></i></button>
        <button style="margin-left:5px" class="btn btn-secondary ml-auto"><i class="fa fa-user-plus"></i></button>
    </div>
</div>

<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Select user</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <form id="eventMembForm" method="post" class="col-sm-6 custom-close" data-ajax="true" data-ajax-method="post" data-ajax-complete="completed" data-ajax-url="@Url.Action("SendInvitation", "Sports")">
                <input type="hidden" asp-for="Invitation.FkEvent" value="@Model.Event.EventId" />
                <input type="hidden" asp-for="Invitation.EventInvitationId" />
                <!-- Modal body -->
                <div class="modal-body">
                    <input class="form-control p-2 mb-2" id="myInput" type="text" placeholder="Search..">
                    <h4 class="align-content-center">Users</h4>
                    <div class="form-group">
                        <table class="w-100">
                            <tbody id="myField" name="usersList">
                                @{int i = 0; }
                                @foreach (var item in Model.Users)
                                {
                                    <tr>
                                        <td class="d-flex">
                                            <div> @Html.DisplayFor(modelItem => item.Username) </div>
                                            <input type="hidden" asp-for="Invitation.FkUser" value="@item.UserId" />
                                            <input id="btnSave" name="submitBtn" type="submit" value="Invite" class="btn btn-success ml-auto" />
                                        </td>
                                    </tr>
                                    ++i;
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="d-flex flex-row">
    <div class="d-flex flex-column col-md-2 col-xs-2">
        @*<h4>Event</h4>
            <hr />*@
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.Title)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.MaxParticipantAmt)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.StartTime)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.EndTime)
        </div>
        @*<div class="p-2">
                @Html.DisplayNameFor(model => model.Event.IsPrivate)            // idk if we need to show this
            </div>*@
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkGameTypeNavigation)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkLocationNavigation)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkOwnerNavigation)
        </div>
    </div>

    <div class="d-flex flex-column col-md-2 col-xs-2">
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.Title)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.MaxParticipantAmt)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.StartTime)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.EndTime)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkGameTypeNavigation.Name)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkLocationNavigation.Address)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkOwnerNavigation.Username)
        </div>
    </div>

    <div class="d-flex flex-column col-md-4" id="participantList">
        @await Component.InvokeAsync("EventMemberList", new { eventId = Model.Event.EventId, userId = 0 })
    </div>

    <div class="container-fluid" id="eventMap"></div>

</div>

@if (Model.Participants.Any(p => p.FkUser == currentUser.UserId))
{ 
    <div>
        <input id="joinLeaveBtn" type="button" onclick="leaveEvent()" value="Leave" class="btn btn-danger" />
    </div>
}
else
{
    <div>
        <input id="joinLeaveBtn" type="button" onclick="joinEvent()" value="Join" class="btn btn-success" />
    </div>
}

@*<div>
    <a asp-action="Edit" asp-route-id="@Model.Event.EventId">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>*@

<script async defer
        src="">
</script>

<script>
    function joinEvent() {
        $("#participantList").load("@Url.Action("SportsEventMemberVC", "Sports", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Leave");
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "leaveEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-success');
        document.getElementById("joinLeaveBtn").classList.add('btn-danger');
    }

    function leaveEvent() {
        $("#participantList").load("@Url.Action("SportsEventMemberVC", "Sports", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Join");
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "joinEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-danger');
        document.getElementById("joinLeaveBtn").classList.add('btn-success');
    }
</script>

<script>
    // Initialize and add the map
    function initMap() {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        var kaunas = { lat: locationsObj[0].latitude, lng: locationsObj[0].longitude };
        var map = new google.maps.Map(
            document.getElementById('eventMap'), { zoom: 6, center: kaunas });
        //var marker = new google.maps.Marker({ position: kaunas, map: map });
        lmao(map);
    }
    function lmao(map) {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        var allMarkers = [];
        // Create some markers
        for (var i = 0; i < locationsObj.length; i++) {
            var pos = { lat: locationsObj[i].latitude, lng: locationsObj[i].longitude };
            var marker = new google.maps.Marker({ position: pos, map: map });
            marker.myData = i;
            allMarkers.push(marker);
            let infowindow = new google.maps.InfoWindow({
                content: locationsObj[i].address + '</br>' + '<h4>' + locationsObj[i].game + '</h4>',
                map: map
            });
            marker.addListener('mouseover', function () {
                infowindow.open(map, this);
            });
            marker.addListener('mouseout', function () {
                infowindow.close();
            });
        }

        //for (let marker of allMarkers) {
        //marker.addListener('mouseover', function () {
        //    infowindow.open(map, this);
        //});
        //// assuming you also want to hide the infowindow when user mouses-out
        //marker.addListener('mouseout', function () {
        //    infowindow.close();
        //});
    };

</script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $("#myInput").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#myField tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });
        $("[name=submitBtn]").click(function () {
            event.preventDefault();
            var obj = {
                FkUser: $($(this).parent().children()[1]).val(),
                FkEvent: $("#Invitation_FkEvent").val()
            };
            var t = $("input[name='__RequestVerificationToken']").val();
            //$("[name=submitBtn]").attr("disabled", true);
            var mybutton = $(this);
            $.ajax({
                url: $("#eventMembForm").attr("data-ajax-url"),
                type: "POST",
                method: 'post',
                headers:
                {
                    "RequestVerificationToken": t
                },
                data: JSON.stringify(obj),
                dataType: "json",
                contentType: "application/json",
                success: function (responseData) {
                    var $myField = $("#myField tr");
                    var url = $("#myField tr").data("url");
                    mybutton.attr("disabled", true);
                    console.log(responseData);
                    $("#myField tr").html(responseData);
                    //$myField.load(url);
                    //$("#myField tr").html(
                    //    $.each(JSON.parse(responseData), function (key, value) {

                    //            //<td class="d-flex">
                    //            //    <div> key </div>
                    //            //    <div> value </div>
                    //            //</td>
                    //    })
                    //);
                    //console.log(responseData[0]);
                    //$.each(JSON.parse(responseData), function(key ,value) {
                    //    alert(value.Text + '---' + value.Value);// + '---' + value.date[0]); //and so on
                    //});
                },
                failure: function (response) {
                    alert("failure");
                },
                error: function (response) {
                    alert("error");
                },
            })

        });
    });
</script>
