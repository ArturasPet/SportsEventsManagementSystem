@model SportBook.ViewModels.EventDetailData
@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var locations = ViewData["Locations"] as List<SportBook.ViewModels.LocationData>;
    var currentUser = ViewData["CurrentUser"] as SportBook.Models.User;
}
<link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />
<div class="d-flex">
    <h1 class="col-md-2">Details</h1>
    <div class="ml-auto">
        <button style="margin-left:5px" data-toggle="modal" data-target="#myModal" class="btn btn-secondary ml-auto"><i class="fa fa-address-book"></i></button>
        <button style="margin-left:5px" class="btn btn-secondary ml-auto"><i class="fa fa-user-plus"></i></button>
    </div>
</div>

<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Select user</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <div class="modal-body">
                <input class="form-control mb-2" id="myInput" type="text" placeholder="Search..">
                <h4 class="align-content-center">Users</h4>
                <ul class="list-group overflow-auto p-2" style="max-height:550px" id="invitableUserList">
                    @await Component.InvokeAsync("InvitableUserList", new { eventId = Model.Event.EventId, userId = 0 })
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="d-flex flex-row">
    <div class="d-flex flex-column col-md-2 col-xs-2">
        @*<h4>Event</h4>
            <hr />*@
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.Title)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.MaxParticipantAmt)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.StartTime)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.EndTime)
        </div>
        @*<div class="p-2">
                @Html.DisplayNameFor(model => model.Event.IsPrivate)            // idk if we need to show this
            </div>*@
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkGameTypeNavigation)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkLocationNavigation)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkOwnerNavigation)
        </div>
    </div>

    <div class="d-flex flex-column col-md-2 col-xs-2">
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.Title)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.MaxParticipantAmt)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.StartTime)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.EndTime)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkGameTypeNavigation.Name)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkLocationNavigation.Address)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkOwnerNavigation.Username)
        </div>
    </div>

    <div class="d-flex flex-column col-md-4" id="participantList">
        @await Component.InvokeAsync("EventMemberList", new { eventId = Model.Event.EventId, userId = 0 })
    </div>

    <div class="container-fluid" id="eventMap"></div>

</div>

@if (Model.Participants.Any(p => p.FkUser == currentUser.UserId))
{
    <div>
        <input id="joinLeaveBtn" type="button" onclick="leaveEvent()" value="Leave" class="btn btn-danger" />
    </div>
}
else
{
    <div>
        <input id="joinLeaveBtn" type="button" onclick="joinEvent()" value="Join" class="btn btn-success" />
    </div>
}

<div id="chat ml-3">
    @await Component.InvokeAsync("Chatroom", new { chatGroup = ("event_" + Model.Event.EventId) })
</div>

@*<div>
    <a asp-action="Edit" asp-route-id="@Model.Event.EventId">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>*@

<script async defer
        src= '@ViewData["GoogleApi"]'>
</script>

<script>
    function joinEvent() {
        $("#participantList").load("@Url.Action("SportsEventMemberVC", "Sports", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Leave");
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "leaveEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-success');
        document.getElementById("joinLeaveBtn").classList.add('btn-danger');
    }

    function leaveEvent() {
        $("#participantList").load("@Url.Action("SportsEventMemberVC", "Sports", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Join");
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "joinEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-danger');
        document.getElementById("joinLeaveBtn").classList.add('btn-success');
    }
</script>

<script>
    // Initialize and add the map
    function initMap() {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        var kaunas = { lat: locationsObj[0].latitude, lng: locationsObj[0].longitude };
        var map = new google.maps.Map(
            document.getElementById('eventMap'), { zoom: 6, center: kaunas });
        //var marker = new google.maps.Marker({ position: kaunas, map: map });
        lmao(map);
    }
    function lmao(map) {
        var locationsObj = @Html.Raw(Json.Serialize(locations));
        var allMarkers = [];
        // Create some markers
        for (var i = 0; i < locationsObj.length; i++) {
            var pos = { lat: locationsObj[i].latitude, lng: locationsObj[i].longitude };
            var marker = new google.maps.Marker({ position: pos, map: map });
            marker.myData = i;
            allMarkers.push(marker);
            let infowindow = new google.maps.InfoWindow({
                content: locationsObj[i].address + '</br>' + '<h4>' + locationsObj[i].game + '</h4>',
                map: map
            });
            marker.addListener('mouseover', function () {
                infowindow.open(map, this);
            });
            marker.addListener('mouseout', function () {
                infowindow.close();
            });
        }

        //for (let marker of allMarkers) {
        //marker.addListener('mouseover', function () {
        //    infowindow.open(map, this);
        //});
        //// assuming you also want to hide the infowindow when user mouses-out
        //marker.addListener('mouseout', function () {
        //    infowindow.close();
        //});
    };

</script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        $("#myInput").on("keyup", function () {
            var value = $(this).val().toLowerCase();
            $("#invitableUserList li").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });
    });

    $('body').on('click', '.invitableUser', function () {
        PostInvites($(this));
        return false;
    });

    function PostInvites(data) {
        var obj = data.attr("id");
        var link = "@Url.Action("InvitableUserVC", "Sports", new { eventId = Model.Event.EventId, userId = "-1" })";
        link = link.replace("-1", obj);
        link = link.replace("amp;", "");
        $("#invitableUserList").load(link, function () { });
    }
</script>
