@model SportBook.ViewModels.EventData

@{
    ViewData["Title"] = "ViewEvent";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentUser = ViewData["CurrentUser"] as SportBook.Models.User;
}

<h1>ViewEvent</h1>

<div class="d-flex flex-row">
    <div class="d-flex flex-column col-md-2">
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.Title)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.MaxParticipantAmt)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.StartTime)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.EndTime)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.IsPrivate)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.IsTeamEvent)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkGameTypeNavigation)
        </div>
        <div class="p-2">
            @Html.DisplayNameFor(model => model.Event.FkOwnerNavigation)
        </div>
    </div>
    <div class="d-flex flex-column col-md-2">
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.Title)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.MaxParticipantAmt)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.StartTime)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.EndTime)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.IsPrivate)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.IsTeamEvent)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkGameTypeNavigation.Name)
        </div>
        <div class="p-2">
            @Html.DisplayFor(model => model.Event.FkOwnerNavigation.Username)
        </div>
    </div>
    @*<div class="d-flex flex-column col-md-1"></div>*@
    <div class="d-flex flex-column col-md-8" id="participantList">
        @await Component.InvokeAsync("EventMemberList", new { eventId = Model.Event.EventId, userId = 0 })
    </div>
</div>
@if (Model.Participants.Any(p => p.FkUser == currentUser.UserId))
{
    <div>
        <input id="joinLeaveBtn" type="button" onclick="leaveEvent()" value="Leave" class="btn btn-danger" />
    </div>
}
else
{
    <div>
        <input id="joinLeaveBtn" type="button" onclick="joinEvent()" value="Join" class="btn btn-success" />
    </div>
}


<script>
    function joinEvent() {
        $("#participantList").load("@Url.Action("EventMemberVC", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Leave"); 
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "leaveEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-success');
        document.getElementById("joinLeaveBtn").classList.add('btn-danger');
    }
    
    function leaveEvent() {
        $("#participantList").load("@Url.Action("EventMemberVC", new { eventId = Model.Event.EventId, currentUser.UserId })");
        document.getElementById("joinLeaveBtn").setAttribute("value", "Join"); 
        document.getElementById("joinLeaveBtn").setAttribute("onClick", "joinEvent()");
        document.getElementById("joinLeaveBtn").classList.remove('btn-danger');
        document.getElementById("joinLeaveBtn").classList.add('btn-success');
    }    
</script>

@*<div>*@
@*<a asp-action="Edit" asp-route-id="@Model.EventId">Edit</a> |*@
@*<a asp-action="Esports">Back to List</a>*@
@*</div>*@